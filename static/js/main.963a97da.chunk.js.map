{"version":3,"sources":["components/NavBar.tsx","components/WrappedRoute.tsx","components/PageHeader.tsx","components/EditorStore.ts","components/EditorContext.ts","components/SelectUser.tsx","pm/schema.ts","pm/track-changes-plugin.ts","pm/PMEditor.tsx","components/Editor.tsx","pages/FrontPage.tsx","routes.tsx","index.tsx"],"names":["NavBar","props","className","Container","Nav","Link","to","exact","activeClassName","styled","div","nav","NavLink","WrappedRoute","Component","component","rest","render","MainWrapper","MainContainer","main","PageHeader","href","EditorStore","key","view","currentEditorState","localStorageKey","setUserID","id","dispatch","state","tr","setMeta","setEditorView","EditorState","fromJSON","schema","plugins","updateState","syncCurrentEditorState","newState","toJSON","localStorage","setItem","JSON","stringify","this","window","existing","getItem","length","stored","parse","ReactEditorContext","createContext","SelectUser","useState","userID","ctx","useContext","handleSelectUser","Button","onClick","button","Schema","nodes","doc","content","paragraph","group","parseDOM","tag","toDOM","blockquote","defining","horizontal_rule","heading","attrs","level","default","node","code_block","marks","code","preserveWhitespace","text","image","inline","src","alt","title","draggable","getAttrs","p","dom","getAttribute","hard_break","selectable","link","inclusive","italic","style","bold","fontWeight","test","strikethrough","trackChangesPluginKey","PluginKey","colorScheme","trackChangesPlugin","Plugin","init","config","changeSet","ChangeSet","create","decorationSet","DecorationSet","empty","userColors","Map","apply","value","oldState","getMeta","oldChangeSet","has","set","size","addSteps","mapping","maps","decorations","allDeletionsLength","allInsertsLength","changes","forEach","change","insertFrom","fromB","inserted","span","colors","get","data","push","Decoration","toB","deletionsLength","deleted","start","fromA","startDoc","textBetween","widget","getPos","element","document","createElement","textContent","setAttribute","deletedWidget","side","getState","PMEditor","editorViewRef","useRef","editorRef","dispatchTransaction","transaction","current","editorState","onEdit","useLayoutEffect","exampleSetup","concat","editorViewDOM","EditorView","mount","editorView","createEditorView","onEditorReady","destroy","ref","Editor","editorStore","useMemo","debouncedSync","debounce","Provider","applyDevTools","FrontPage","Routes","basename","process","path","getElementById"],"mappings":"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","file":"static/js/main.963a97da.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { RouteComponentProps } from 'react-router'\n\ninterface IProps extends RouteComponentProps<{}> {\n  className?: string\n}\n\nexport const NavBar = (props: IProps) => {\n  const { className} = props\n  return (\n    <Container className={className}>\n      <Nav>\n        <Link to=\"/\" exact activeClassName=\"current\">Front page</Link>\n      </Nav>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  background: var(--color-primary);\n  box-shadow: 0 0 2px 2px rgba(0,0,0,0.18);\n  padding: 1rem;\n`\nconst Nav = styled.nav`\n  align-items: center;\n  color: #fff;\n  display: flex;\n  justify-content: space-between;\n`\nconst Link = styled(NavLink)`\n  box-sizing: border-box;\n  color: #fff;\n  cursor: pointer;\n  font-size: 1rem;\n  padding: 0.5rem 1rem;\n  text-decoration: none;\n  transition: 0.2s hover;\n  &:hover {\n    text-decoration: underline;\n  }\n  &.current {\n    font-weight: 600;\n  }\n`\n","import * as React from 'react'\nimport { Route, RouteProps, RouteComponentProps } from 'react-router'\nimport styled from 'styled-components'\n\nimport { NavBar } from './NavBar'\n\ntype ReactComponent = React.ComponentClass<any> | React.StatelessComponent<any>\n\ninterface IWrappedRoute extends RouteProps {\n  component: ReactComponent\n}\n\nconst renderNoMainContainerWrapper = (Component: ReactComponent) => (props: RouteComponentProps<any>) =>\n  <MainWrapper>\n    <NavBar {...props}/>\n    <Component {...props}/>\n  </MainWrapper>\n\nconst renderWrapper = (Component: ReactComponent) => (props: RouteComponentProps<any>) =>\n  <MainWrapper>\n    <NavBar {...props}/>\n    <MainContainer>\n      <Component {...props}/>\n    </MainContainer>\n  </MainWrapper>\n\nexport const NoMainContainerRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderNoMainContainerWrapper(component)}/>\n\nexport const WrappedRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderWrapper(component)}/>\n\nconst MainWrapper = styled.div`\n  min-height: 100vh;\n`\nconst MainContainer = styled.main`\n  margin: 40px auto 0 auto;\n  max-width: 680px;\n  padding-bottom: 20px;\n  @media only screen and (max-width: 720px) {\n    margin: 40px 20px 0 20px;\n    padding-bottom: 20px;\n  }\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\n\ninterface IProps {\n  className?: string\n}\n\nexport function PageHeader(props: IProps) {\n  const { className } = props\n  return (\n    <Container className={className}>\n      <header>\n        <h1><a href=\"https://teemukoivisto.github.io/prosemirror-track-changes-example/\">\n          Track changes example</a></h1>\n        <p>With prosemirror-changeset</p>\n        <p><a href=\"https://github.com/TeemuKoivisto/prosemirror-track-changes-example\">Github repo</a></p>\n      </header>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n`\n","import { EditorView } from 'prosemirror-view'\nimport { EditorState } from 'prosemirror-state'\n\nexport class EditorStore {\n\n  view?: EditorView\n  currentEditorState?: {[key: string]: any}\n  localStorageKey: string\n\n  constructor(key: string) {\n    this.localStorageKey = key\n    if (typeof window !== 'undefined') {\n      const existing = localStorage.getItem(this.localStorageKey)\n      if (existing && existing !== null && existing.length > 0) {\n        let stored = JSON.parse(existing)\n        this.currentEditorState = stored\n      }\n    }\n  }\n\n  setUserID = (id: string) => {\n    this.view?.dispatch(this.view?.state.tr.setMeta('set-userID', id))\n  }\n\n  setEditorView = (view: EditorView) => {\n    this.view = view\n    if (this.currentEditorState) {\n      const state = EditorState.fromJSON(\n        {\n          schema: this.view.state.schema,\n          plugins: this.view.state.plugins,\n        },\n        this.currentEditorState\n      )\n      this.view.updateState(state)\n    }\n  }\n\n  syncCurrentEditorState = () => {\n    const newState = this.view!.state.toJSON()\n    localStorage.setItem(this.localStorageKey, JSON.stringify(newState))\n  }\n}","import { createContext, useContext } from 'react'\n\nimport { EditorStore } from './EditorStore'\n\nexport type EditorContext = EditorStore\n\nexport const ReactEditorContext = createContext<EditorContext>(new EditorStore('editor-store'))\n\nexport const useEditorContext = () => useContext(ReactEditorContext)\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { useEditorContext } from './EditorContext'\n\ninterface IProps {\n  className?: string\n}\n\nexport function SelectUser(props: IProps) {\n  const { className } = props\n  const [userID, setUserID] = useState('1')\n  const ctx = useEditorContext()\n\n  function handleSelectUser(id: string) {\n    ctx.setUserID(id)\n    setUserID(id)\n  }\n  return (\n    <Container className={className}>\n      <div className=\"current-user\">\n        Current user: {userID}\n      </div>\n      <div>\n        <Button onClick={() => handleSelectUser('1')}>User 1</Button>\n        <Button onClick={() => handleSelectUser('2')}>User 2</Button>\n        <Button onClick={() => handleSelectUser('3')}>User 3</Button>\n      </div>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  align-items: center;\n  display: flex;\n  .current-user {\n    margin: 0.25rem 1rem 0.25rem 0;\n  }\n`\nconst Button = styled.button`\n  cursor: pointer;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`","import { Schema } from 'prosemirror-model'\n\nexport type Marks = 'bold' | 'code' | 'italic' | 'link' | 'strikethrough'\nexport type Nodes =\n  | 'blockquote'\n  | 'code_block'\n  | 'doc'\n  | 'hard_break'\n  | 'heading'\n  | 'horizontal_rule'\n  | 'image'\n  | 'paragraph'\n  | 'text'\nexport type ExampleSchema = Schema<Nodes, Marks>\n\nexport const schema: ExampleSchema = new Schema<Nodes, Marks>({\n  nodes: {\n    // :: NodeSpec The top level document node.\n    doc: {\n      content: 'block+',\n    },\n\n    // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n    // as a `<p>` element.\n    paragraph: {\n      content: 'inline*',\n      group: 'block',\n      parseDOM: [{ tag: 'p' }],\n      toDOM() {\n        return ['p', 0]\n      },\n    },\n\n    // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n    blockquote: {\n      content: 'block+',\n      group: 'block',\n      defining: true,\n      parseDOM: [{ tag: 'blockquote' }],\n      toDOM() {\n        return ['blockquote', 0]\n      },\n    },\n\n    // :: NodeSpec A horizontal rule (`<hr>`).\n    horizontal_rule: {\n      group: 'block',\n      parseDOM: [{ tag: 'hr' }],\n      toDOM() {\n        return ['hr']\n      },\n    },\n\n    // :: NodeSpec A heading textblock, with a `level` attribute that\n    // should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n    // `<h6>` elements.\n    heading: {\n      attrs: { level: { default: 1 } },\n      content: 'inline*',\n      group: 'block',\n      defining: true,\n      parseDOM: [\n        { tag: 'h1', attrs: { level: 1 } },\n        { tag: 'h2', attrs: { level: 2 } },\n        { tag: 'h3', attrs: { level: 3 } },\n        { tag: 'h4', attrs: { level: 4 } },\n        { tag: 'h5', attrs: { level: 5 } },\n        { tag: 'h6', attrs: { level: 6 } },\n      ],\n      toDOM(node) {\n        return ['h' + node.attrs.level, 0]\n      },\n    },\n\n    // :: NodeSpec A code listing. Disallows marks or non-text inline\n    // nodes by default. Represented as a `<pre>` element with a\n    // `<code>` element inside of it.\n    code_block: {\n      content: 'text*',\n      marks: '',\n      group: 'block',\n      code: true,\n      defining: true,\n      parseDOM: [{ tag: 'pre', preserveWhitespace: 'full' }],\n      toDOM() {\n        return ['pre', ['code', 0]]\n      },\n    },\n\n    // :: NodeSpec The text node.\n    text: {\n      group: 'inline',\n    },\n\n    // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n    // `alt`, and `href` attributes. The latter two default to the empty\n    // string.\n    image: {\n      inline: true,\n      attrs: {\n        src: {},\n        alt: { default: null },\n        title: { default: null },\n      },\n      group: 'inline',\n      draggable: true,\n      parseDOM: [\n        {\n          tag: 'img[src]',\n          getAttrs(p) {\n            const dom = p as HTMLElement\n            return {\n              src: dom.getAttribute('src'),\n              title: dom.getAttribute('title'),\n              alt: dom.getAttribute('alt'),\n            }\n          },\n        },\n      ],\n      toDOM(node) {\n        const { src, alt, title } = node.attrs\n        return ['img', { src, alt, title }]\n      },\n    },\n\n    // :: NodeSpec A hard line break, represented in the DOM as `<br>`.\n    hard_break: {\n      inline: true,\n      group: 'inline',\n      selectable: false,\n      parseDOM: [{ tag: 'br' }],\n      toDOM() {\n        return ['br']\n      },\n    },\n  },\n  marks: {\n    // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n    // defaults to the empty string. Rendered and parsed as an `<a>`\n    // element.\n    link: {\n      attrs: {\n        href: {},\n        title: { default: null },\n      },\n      inclusive: false,\n      parseDOM: [\n        {\n          tag: 'a[href]',\n          getAttrs(p) {\n            const dom = p as HTMLElement\n            return {\n              href: dom.getAttribute('href'),\n              title: dom.getAttribute('title'),\n            }\n          },\n        },\n      ],\n      toDOM(node) {\n        const { href, title } = node.attrs\n        return ['a', { href, title }, 0]\n      },\n    },\n\n    // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.\n    // Has parse rules that also match `<i>` and `font-style: italic`.\n    italic: {\n      parseDOM: [{ tag: 'i' }, { tag: 'em' }, { style: 'font-style=italic' }],\n      toDOM() {\n        return ['em', 0]\n      },\n    },\n\n    // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules\n    // also match `<b>` and `font-weight: bold`.\n    bold: {\n      parseDOM: [\n        { tag: 'strong' },\n        // This works around a Google Docs misbehavior where\n        // pasted content will be inexplicably wrapped in `<b>`\n        // tags with a font-weight normal.\n        {\n          tag: 'b',\n          getAttrs: (p) => {\n            const node = p as HTMLElement\n            return node.style.fontWeight != 'normal' && null\n          },\n        },\n        {\n          style: 'font-weight',\n          getAttrs: (p) => {\n            const value = p as string\n            return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n          },\n        },\n      ],\n      toDOM() {\n        return ['strong', 0]\n      },\n    },\n\n    // :: MarkSpec Code font mark. Represented as a `<code>` element.\n    code: {\n      parseDOM: [{ tag: 'code' }],\n      toDOM() {\n        return ['code', 0]\n      },\n    },\n\n    strikethrough: {\n      parseDOM: [\n        { tag: 's' },\n        { tag: 'strike' },\n        { style: 'text-decoration=line-through' },\n        { style: 'text-decoration-line=line-through' },\n      ],\n      toDOM: () => ['s'],\n    }\n  },\n})\n","import { EditorView } from 'prosemirror-view'\nimport { Plugin, PluginKey } from 'prosemirror-state'\nimport { Decoration, DecorationSet } from 'prosemirror-view'\nimport { ChangeSet } from 'prosemirror-changeset'\n\nimport { ExampleSchema } from './schema'\n\nexport interface PluginState {\n  changeSet: ChangeSet\n  decorationSet: DecorationSet<ExampleSchema>\n  userColors: Map<string, [string, string]>\n  userID: string\n}\n\nexport const trackChangesPluginKey = new PluginKey<PluginState, ExampleSchema>('track-changes')\n\nconst colorScheme: [string, string][] = [\n  ['greenyellow', '#ffa4a4'],\n  ['#10c727', '#ff0707'],\n  ['#7adcb8', '#f93aa2']\n]\n\nconst deletedWidget = (content: string, style: string) => (view: EditorView, getPos: () => number) => {\n  const element = document.createElement('span')\n  element.textContent = content\n  element.setAttribute('style', style)\n  return element\n}\n\nexport const trackChangesPlugin = () =>\n  new Plugin({\n    key: trackChangesPluginKey,\n    state: {\n      init(config, state) {\n        return {\n          changeSet: ChangeSet.create(state.doc),\n          decorationSet: DecorationSet.empty,\n          userColors: new Map(),\n          userID: '1',\n        }\n      },\n\n      apply(tr, value, oldState, newState) {\n        if (tr.getMeta('set-userID')) {\n          return { ...value, userID: tr.getMeta('set-userID') }\n        }\n        const { changeSet: oldChangeSet, userColors, userID } = value\n        if (!userColors.has(userID)) {\n          userColors.set(userID, colorScheme[userColors.size])\n        }\n        const changeSet = oldChangeSet.addSteps(tr.doc, tr.mapping.maps, { userID })\n        const decorations: Decoration[] = []\n        let allDeletionsLength = 0\n        let allInsertsLength = 0\n\n        changeSet.changes.forEach((change) => {\n          let insertFrom = change.fromB\n          change.inserted.forEach((span) => {\n            const colors = value.userColors.get(span.data.userID)\n            const style = `background: ${colors ? colors[0] : ''};`\n            decorations.push(Decoration.inline(insertFrom, change.toB, { style }))\n            // @ts-ignore\n            insertFrom += span.length\n            // @ts-ignore\n            allInsertsLength += span.length\n          })\n\n          let deletionsLength = 0\n          change.deleted.forEach((span) => {\n            const start = change.fromA + deletionsLength\n            // @ts-ignore\n            const content = changeSet.startDoc.textBetween(start, start + span.length)\n            const colors = value.userColors.get(span.data.userID)\n            const style = `background: ${colors ? colors[1] : ''};`\n            decorations.push(\n              Decoration.widget(start + allDeletionsLength + allInsertsLength, deletedWidget(content, style), {\n                side: 0,\n                marks: [oldState.schema.marks.strikethrough.create()],\n              })\n            )\n            // @ts-ignore\n            allDeletionsLength -= span.length\n            // @ts-ignore\n            deletionsLength += span.length\n          })\n        })\n\n        return {\n          changeSet,\n          decorationSet: DecorationSet.create(tr.doc, decorations),\n          userColors,\n          userID,\n        }\n      },\n    },\n    props: {\n      decorations(state) {\n        return this.getState(state).decorationSet\n      },\n    },\n  })\n","import React, { useLayoutEffect, useRef } from 'react'\nimport { EditorView } from 'prosemirror-view'\nimport { EditorState, Transaction } from 'prosemirror-state'\nimport { exampleSetup } from 'prosemirror-example-setup'\n\nimport { schema } from './schema'\nimport { trackChangesPlugin } from './track-changes-plugin'\n\nimport './editor.css'\nimport './prosemirror-example-setup.css'\nimport './menu.css'\n\ninterface EditorProps {\n  className?: string\n  onEditorReady?: (view: EditorView) => void\n  onEdit?: (state: EditorState) => void\n}\n\nexport function PMEditor(props: EditorProps) {\n  const { className = '' } = props\n  const editorViewRef = useRef(null)\n  const editorRef = useRef<EditorView | null>(null)\n\n  useLayoutEffect(() => {\n    const state = createEditorState()\n    const editorViewDOM = editorViewRef.current\n    if (editorViewDOM) {\n      editorRef.current = createEditorView(editorViewDOM, state)\n      props.onEditorReady && props?.onEditorReady(editorRef.current)\n    }\n    return () => {\n      editorRef.current?.destroy()\n    }\n  }, [])\n\n  function createEditorState() {\n    return EditorState.create({\n      schema,\n      plugins: exampleSetup({ schema }).concat(\n        trackChangesPlugin(),\n      ),\n    })\n  }\n\n  function createEditorView(element: HTMLDivElement, state: EditorState) {\n    const view = new EditorView({ mount: element }, {\n      state,\n      dispatchTransaction,\n    })\n    // @ts-ignore\n    if (window) window.editorView = view\n    return view\n  }\n\n  function dispatchTransaction(transaction: Transaction) {\n    if (!editorRef.current) {\n      return\n    }\n    const editorState = editorRef.current.state.apply(transaction)\n    editorRef.current.updateState(editorState)\n    if (props.onEdit) {\n      props.onEdit(editorState)\n    }\n  }\n\n  return (\n    <div id=\"example-editor\" ref={editorViewRef} className={className}/>\n  )\n}\n","import React, { useMemo } from 'react'\nimport debounce from 'lodash.debounce'\n\nimport { SelectUser } from './SelectUser'\n\nimport { EditorView } from 'prosemirror-view'\nimport { applyDevTools } from 'prosemirror-dev-tools'\n\nimport { PMEditor } from 'pm/PMEditor'\nimport { EditorStore } from './EditorStore'\nimport { ReactEditorContext } from './EditorContext'\n\nexport function Editor() {\n  const editorStore = useMemo(() => new EditorStore('track-changes'), [])\n  const debouncedSync = useMemo(() => debounce(editorStore.syncCurrentEditorState, 250), [])\n\n  function handleEdit() {\n    debouncedSync()\n  }\n  function handleEditorReady(view: EditorView) {\n    editorStore.setEditorView(view)\n    applyDevTools(view)\n  }\n  return (\n    <ReactEditorContext.Provider value={editorStore}>\n      <SelectUser/>\n      <PMEditor\n        onEdit={handleEdit}\n        onEditorReady={handleEditorReady}\n      />\n    </ReactEditorContext.Provider>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport { PageHeader } from '../components/PageHeader'\nimport { Editor } from '../components/Editor'\n\nexport function FrontPage() {\n  return (\n    <Container>\n      <PageHeader/>\n      <Editor/>\n    </Container>\n  )\n}\n\nconst Container = styled.div``\n","import * as React from 'react'\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom'\n\nimport { WrappedRoute } from './components/WrappedRoute'\n\nimport { FrontPage } from './pages/FrontPage'\n\nexport const Routes = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <WrappedRoute exact path=\"/\" component={FrontPage}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n)\n","import * as React from 'react'\nimport { render } from 'react-dom'\n\nimport { Routes } from './routes'\n\nimport './index.css'\n\nrender(\n  <Routes />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}